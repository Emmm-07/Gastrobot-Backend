// Code generated by Arduino IoT Cloud, DO NOT EDIT.

#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>

const char DEVICE_LOGIN_NAME[]  = "d93de402-8b61-46de-bfb1-4a945667cf11";

const char SSID[]               = SECRET_SSID;    // Network SSID (name)
const char PASS[]               = SECRET_OPTIONAL_PASS;    // Network password (use for WPA, or use as key for WEP)
const char DEVICE_KEY[]  = SECRET_DEVICE_KEY;    // Secret device password

void onGasBattIsEmptyObstacleChange();
void onLogMessageChange();
void onCameraPanHorizontalChange();
void onCameraPanVerticalChange();
void onGasLevelChange();
void onBatteryLevelChange();
void onBotMovementChange();
void onHaveObstacleChange();
void onIsContainerEmptyChange();
void onIsFanOnChange();
void onIsSprayOnChange();
void onIsVacuumOnChange();
void onIsWifiConnectedChange();

String gas_Batt_IsEmpty_Obstacle;
String logMessage;
float cameraPanHorizontal;
float cameraPanVertical;
float gasLevel;
int batteryLevel;
int botMovement;
bool haveObstacle;
bool isContainerEmpty;
bool isFanOn;
bool isSprayOn;
bool isVacuumOn;
bool isWifiConnected;

void initProperties(){

  ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
  ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);
  ArduinoCloud.addProperty(gas_Batt_IsEmpty_Obstacle, READWRITE, ON_CHANGE, onGasBattIsEmptyObstacleChange);
  ArduinoCloud.addProperty(logMessage, READWRITE, ON_CHANGE, onLogMessageChange);
  ArduinoCloud.addProperty(cameraPanHorizontal, READWRITE, ON_CHANGE, onCameraPanHorizontalChange);
  ArduinoCloud.addProperty(cameraPanVertical, READWRITE, ON_CHANGE, onCameraPanVerticalChange);
  ArduinoCloud.addProperty(gasLevel, READWRITE, ON_CHANGE, onGasLevelChange);
  ArduinoCloud.addProperty(batteryLevel, READWRITE, ON_CHANGE, onBatteryLevelChange);
  ArduinoCloud.addProperty(botMovement, READWRITE, ON_CHANGE, onBotMovementChange);
  ArduinoCloud.addProperty(haveObstacle, READWRITE, ON_CHANGE, onHaveObstacleChange);
  ArduinoCloud.addProperty(isContainerEmpty, READWRITE, ON_CHANGE, onIsContainerEmptyChange);
  ArduinoCloud.addProperty(isFanOn, READWRITE, ON_CHANGE, onIsFanOnChange);
  ArduinoCloud.addProperty(isSprayOn, READWRITE, ON_CHANGE, onIsSprayOnChange);
  ArduinoCloud.addProperty(isVacuumOn, READWRITE, ON_CHANGE, onIsVacuumOnChange);
  ArduinoCloud.addProperty(isWifiConnected, READWRITE, ON_CHANGE, onIsWifiConnectedChange);

}

WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);
